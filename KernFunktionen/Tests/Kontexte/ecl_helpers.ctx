--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: ecl_helpers
Element-Type: context
Element-Version: 2.0
Id: _Cr4zgP0jEeiNqfuAT0PA2A
Runtime-Version: 2.6.0.202505301009
Save-Time: 6/2/25, 11:35 AM

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa
Content-Type: text/plain
Entry-Name: .description

Here you find some ECL helper functions to solve often used problems.
------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa--
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc "get-env" [val name] {
		invoke-static "org.eclipse.rcptt.util" "java.lang.System" getenv $name
}
proc "pwd" {
	if [ get-by-os  -win true -macosx false -linux false ] {
		replaceAll [ get-java-property "user.dir" ] "\\\\" "/"
	} -else {
		get-java-property "user.dir"
	}
}
proc "get-default-locale" {
	invoke-static "org.eclipse.rcptt.util" "java.util.Locale" getDefault
}

// return a current date and time, eg. 14.10.2020 20:30:45
proc now {
	get-time | format-time "dd.MM.yyyy HH:mm:ss"
}

global [ val today [invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now  |
			invoke format [invoke-static  "org.eclipse.rcptt.util"  "java.time.format.DateTimeFormatter" "ofPattern" "dd.MM.yyyy" ]
	 ] ]
global [ val tomorrow [invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now  |
			invoke plusDays "+1" |
			invoke format [invoke-static  "org.eclipse.rcptt.util"  "java.time.format.DateTimeFormatter" "ofPattern" "dd.MM.yyyy" ]
	 ] ]
global [ val yesterday [invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now  |
			invoke plusDays "-1" |
			invoke format [invoke-static  "org.eclipse.rcptt.util"  "java.time.format.DateTimeFormatter" "ofPattern" "dd.MM.yyyy" ]
	 ] ]
global [ val aWeekAhead [invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now  |
			invoke plusDays "+7" |
			invoke format [invoke-static  "org.eclipse.rcptt.util"  "java.time.format.DateTimeFormatter" "ofPattern" "dd.MM.yyyy" ]
	 ] ]
global [ val aWeekAgo [invoke-static  "org.eclipse.rcptt.util"  "java.time.LocalDate" now  |
			invoke plusDays "-7" |
			invoke format [invoke-static  "org.eclipse.rcptt.util"  "java.time.format.DateTimeFormatter" "ofPattern" "dd.MM.yyyy" ]
	 ] ]
// concat "today ist " $today " tomorrow " $tomorrow " yesterday: " $yesterday
//	 " aWeekAhead: " $aWeekAhead  " aWeekAgo: " $aWeekAgo | log

// concat "user.home: " [get-java-property user.home]  ": getWritableUserDir returns: " [ invoke-static -pluginId ch.elexis.core.data
// className ch.elexis.core.data.activator.CoreHub -methodName getWritableUserDir ] | log

proc "get-user-dir" {
	if [ get-by-os  -win true -macosx false -linux false ] {
		global [val myUserDir [ concat  [get-java-property user.home] "/elexis" | str ] ] -override
		global [val myUserDir [ replaceAll  -replaceString  "/" -searchPattern  "\\\\" -inString $myUserDir] ] -override
		global [val myUserDir [ replaceAll  -replaceString  "\\\\ " -searchPattern  " " -inString $myUserDir] ] -override
		$myUserDir | str
	} -else {
		invoke-static -pluginId ch.elexis.core.data -className ch.elexis.core.data.activator.CoreHub -methodName getWritableUserDir
	}
}
proc "safe-get-java-property" [val name] {
	try {
		log -message [ concat "Value of Java property " $name " is: " [ get-java-property $name ] ]
		get-java-property $name
	} -catch {
		log [ concat "No such java-property: " $name ]
		""
	}
}

proc "get-seconds-in-minute" {
	get-time | div 1000 | mod 60 | int
}

proc "get-seconds" {
	get-time | div 1000
}

/**
 * @input: inString a string
*/
proc replaceFirst [ val inString ] [ val searchPattern ] [ val replaceString] {
	// concat "replaceFirst: " $inString " '"  $searchPattern "' -> '" $replaceString "'" | log
	$inString | invoke replaceFirst $searchPattern $replaceString
}
// replaceFirst "Welcome to Tutorialspoint.com" "(.*)Tutorials(.*)" "AMROOD" | log

proc replaceAll [ val inString ] [ val searchPattern ] [ val replaceString] {
	$inString | invoke replaceAll $searchPattern $replaceString
}

proc cleanFileName [ val original ] {
	try {
	    invoke-static  "org.apache.commons.commons-io" "org.apache.commons.io.FilenameUtils" "separatorsToUnix" [
		replaceAll -inString $original -searchPattern "[ äöüéèàç\*\"\[\]]" -replaceString "_" ]
	} -catch {
	    invoke-static  "org.apache.commons.io" "org.apache.commons.io.FilenameUtils" "separatorsToUnix" [
		replaceAll -inString $original -searchPattern "[ äöüéèàç\*\"\[\]]" -replaceString "_" ]
	}
}

let [ val testString  "Test\A äöüéèàç mit.*[]" ]
    [ val expected "Test/A_________mit.___" ] {
	cleanFileName $testString | str | equals $expected | assert-true -message
		[ concat "cleanFilename expected <" $expected "> is <" [ cleanFileName $testString ] ">"]
}

proc "FileContainsString"  [ val fileName ] [ val searchFor  ] {
	if [ get-by-os  -win true -macosx false -linux false ] {
		log "FileContainsString ignored on windows"
		// We ignore this command on windows, as we grep is not installed by default on Windows
		bool false
	} -else {
		if [ get-file $fileName  | get exists ] {
			let [ val result [ exec-process "grep" $searchFor $fileName -ignoreExitCode true  ] ] {
				concat "FileContainsString " $fileName " returned " [ $result | get  exitCode ] | log
				$result | get  exitCode | equals 0 | bool
			}
		} -else {
			bool false
		}
	}
}

proc "elexisLogMayNotContain"  [ val searchFor  ] {
	FileContainsString -fileName [ concat [get-java-property user.home] "/elexis/logs/elexis-3.log" ] -searchFor $searchFor | not | assert-true
}

proc "no_OOM_error" {
	// elexisLogMayNotContain "java.lang.OutOfMemoryError"
} 

no_OOM_error

global [val rcpttDir	[ concat [ get-user-dir ] "/rcptt/"] ]
global [val restart_msFile [ concat $rcpttDir "restart_msFile" ] ] -override
global [val default_KK "Aquilana" ] -override

/**
 * Somehow this does not always work, wait-until-eclipse-is-ready never returns.
 * We consider it failing unless elexis-run-mode is RunFromScratch or it took less than 5 seconds
 */
proc RestartElexis {
	let [ val milliSecsBeforeRestart [ get-time ] ] {
		concat "RestartElexis: Run-Mode is " [ safe-get-java-property "elexis-run-mode" ] " ms: " $milliSecsBeforeRestart | log
		if [ safe-get-java-property "elexis-run-mode" |  eq "RunFromScratch" ] {
			log "RestartElexis skipping as RunFromScratch" // We cannot restart Elexis without loosing all content
		} -else {
			concat "RestartElexis: Trying to restart Elexis milliSecsBeforeRestart " $milliSecsBeforeRestart | log
			str $milliSecsBeforeRestart  | write-lines $restart_msFile
			log "RestartElexis: Calling log restart-aut"
			restart-aut
			// cannot insert wait nor log here
		}
	}
}

/**
 * Check whether the restart took between 5 and 120 seconds for Elexis
 */
proc CheckRestartElexis {
			log "CheckRestartElexis 1" 
	wait-until-eclipse-is-ready
			log "CheckRestartElexis 2"
	wait 5000
	wait-until-eclipse-is-ready
			log "CheckRestartElexis 3"
	global [val minWaitInSeconds 20 ] -override
	global [val maxWaitInSeconds [mult 10 60 ] ] -override // 10 minutes
	concat "CheckRestartElexis: minWait " $minWaitInSeconds " maxWait " $maxWaitInSeconds " seconds " | log
	wait [ mult 1 1000] // Wait 10 seconds
	wait-until-eclipse-is-ready
			log "CheckRestartElexis 4"
	log "RestartElexis: After wait-until-eclipse-is-ready"
	log "CheckRestartElexis: After waiting 10 seconds"
	// read-file does not work, read-lines neither at they return	 the first line + EOL/EOF
	let [ val milliSecsBeforeRestart [ read-lines $restart_msFile | foreach -do str] ] {
		global [ val waitSeconds [ div [ minus [ get-time ] $milliSecsBeforeRestart ] 1000 ] ] -override
		concat "CheckRestartElexis: took " $waitSeconds " seconds"| log
		concat "CheckRestartElexis: milliSecsBeforeRestart was <" $milliSecsBeforeRestart ">" " is " [ get-time ]  | log
		// $waitSeconds | lt $minWaitInSeconds |not | log
		// $waitSeconds | lt $maxWaitInSeconds | log
	    $waitSeconds | lt $minWaitInSeconds | not | assert-true -message [ concat "CheckRestartElexisTook. Took " $waitSeconds " seconds. Less than " $minWaitInSeconds " seconds"]
		$waitSeconds | lt $maxWaitInSeconds | assert-true -message [ concat "CheckRestartElexis. Took " $waitSeconds " seconds. More than " $maxWaitInSeconds " seconds"]
		concat "CheckRestartElexis: Must take more than " $minWaitInSeconds " and less than " $maxWaitInSeconds " took " $waitSeconds " seconds" | log
	}
}

if [get-by-os -win false -macosx true -linux false] {
	global [ val resultsDir [ concat [pwd ] "/../../../../results/"] ] -override
	log "resultsDir: 2 under MacOSX is " $resultsDir | log
	try {
		global [ val resultsDir [ invoke-static  "org.apache.commons.commons-io" "org.apache.commons.io.FilenameUtils" "normalize" $resultsDir ] ] -override
	} -catch {
		global [ val resultsDir [ invoke-static  "org.apache.commons.io" "org.apache.commons.io.FilenameUtils" "normalize" $resultsDir ] ] -override
	}
	log "resultsDir: 3 under MacOSX is " $resultsDir | log
} -else {
	global [ val resultsDir [ concat [pwd ] "/../results/"] ] -override
	log "resultsDir: (win or linux) is " $resultsDir | log
}
concat "translations_de uri is: "  [uri-from-path [concat [get-java-property user.home] "/elexis/rcptt/translations_de.properties" ] ] | log

global [ val translations [ map
	[ entry de [ read-properties -uri [uri-from-path [concat [get-java-property user.home]"/elexis/rcptt/translations_de.properties" ] ] ] ]
	[ entry fr [ read-properties -uri [uri-from-path [concat [get-java-property user.home] "/elexis//rcptt/translations_fr.properties" ] ] ] ]
	[ entry it [ read-properties -uri [uri-from-path [concat [get-java-property user.home] "/elexis//rcptt/translations_it.properties" ] ] ] ]
] ]
concat "translation read" | log

global [ val imagesDir	[ concat $resultsDir "images/" ] ]
global [ val pdfDir	[ concat $resultsDir "pdf/" ] ]
str "RCPTT created pdfDir" | write-lines [ concat $pdfDir "/dummy.txt" ]
str "RCPTT created .localdoc/backup" | write-lines [ concat [get-user-dir] "/.localdoc/backup/dummy.txt" ]
str "RCPTT created eHC/input" | write-lines [ concat [get-user-dir] "/eHC/input/dummy.txt" ]
str "RCPTT created eHC/output" | write-lines [ concat [get-user-dir] "/eHC/output/dummy.txt" ]
str "RCPTT created extern" | write-lines [ concat [get-user-dir] "/extern/dummy.txt" ]
concat "RCPTT created pdfDir/extern/.localdoc/eHC directories " $pdfDir | log

global [ val preferencesCsvFile [ uri-from-path [ concat  $resultsDir "preferences.csv" ] ] ]
global [ val viewsCsvFile	    [ uri-from-path [ concat  $resultsDir "views.csv" ] ] ]
// concat "get-env HOME returns: " [get-env HOME ] |log
// concat "resultsDir returns: " $resultsDir |log
// concat "get-default-locale returns: " [get-default-locale] |log
// concat "get-user-dir returns: " [get-user-dir] |log
// concat "user.language returns: " [ get-java-property "user.language" "dummy" ]  |log
global [ val defaultLanguage [ get-java-property "user.language" "de" ] ]
// concat "defaultLanguage is now: " $defaultLanguage| log
str "Created eHC/input by RCPTT" | write-lines [ concat [get-user-dir] "/elexis/eHC/input/dummy_input.txt" ]
str "Created eHC/output by RCPTT" | write-lines [ concat [get-user-dir] "/elexis/eHC/output/dummy_output.txt" ]

global [val osgi_uri [invoke-static -pluginId "org.eclipse.core.runtime" -className "java.lang.System" -methodName "getProperty" -args "osgi.instance.area"]]
global [val osgi_file [ split -str $osgi_uri -sep ":"  | to-list | get 1]]
concat "Global osgi area is at " $osgi_uri " as file " $osgi_file | log
proc "t" [val key] [val language $defaultLanguage] {
	try {
		// concat "Searching: " $language "." $key | log
		$translations | get $language | get $key
		} -catch {
		concat "Unable to fetch key " $key " in translations_" $language ".properties"  | log -severity Error
		bool false
	}
}

global [ val praxisProperties [ read-properties -uri [concat [get-java-property user.home] "/elexis/rcptt/praxis_" $defaultLanguage ".properties"]]]
global [ val test_properties  [ read-properties -uri [concat [get-java-property user.home] "/elexis/rcptt/test.properties"]]]

proc "GetPraxisProperty" [val key]  {
	try {
		// concat "Searching: " $language "." $key | log
		$praxisProperties | get $key
		} -catch {
			concat "Unable to fetch key " $key " in praxis_" $defaultLanguage ".properties"  | log -severity Error
			concat ""
	}
}

proc "GetTestProperty" [val key] [val default "" ] {
	try {
		$test_properties | get $key
		} -catch {
			concat "Unable to fetch key " $key " in test.properties"  | log -severity Error
			concat $default
	}
}
GetTestProperty patient.1.familyName | matches Testarossa | assert-true

proc handleResetPerspectiveDialog {
	try {
		concat "handleResetPerspectiveDialog via "  [ t window_reset_perspective ] " and "  [ t btn_reset_perspective ]  | log
		get-window [ t window_reset_perspective ] | get-button [ t btn_reset_perspective ]  | click
		log "handleResetPerspectiveDialog done"
	} -catch {
		log "handleResetPerspectiveDialog failed"
	}
}
proc resetPerspective {
	try {
		if [ get-button [ t global_btn_reset_perspective ] | get-property enablement -raw | equals true ] {
			get-button [ t global_btn_reset_perspective ] | click
			// handleResetPerspectiveDialog
		} -else {
			log "Button reset_perspective is disabled"
		}
	} -error [val errorObj] -catch {
		concat  "Button reset_perspective is disabled: "  [$errorObj | get message] | log
	}
}

/**
 * Logs and creates a snapshot of the passed graphical object
 * See https://www.eclipse.org/rcptt/blog/2014/11/21/screenshots-with-rcptt.html
 */
proc "gen-screenshot" [ val parent -input ] [ val out [ cleanFileName [concat $imagesDir "dest.png"]]] {
	concat "gen-screenshot: " $out | log
	$parent | get-object | save-screenshot $out // creates directory if necessary
}


/**
 * Resets to the default perspectives an
 */
proc "HandleMissingInvoiceSystems" {
	try {
		concat "HandleMissingInvoiceSystems: " [ get-window ".*" | get-text ] | log
		get-window [ t update_invoice_systems ] | get-text | log
		get-window [ t update_invoice_systems ] | close
		concat "HandleMissingInvoiceSystems closed " [ t update_invoice_systems ] | log
	} -error [val errorObj] -catch {
			concat $errorObj " was catched by HandleMissingInvoiceSystems" | log 
	}
}

HandleMissingInvoiceSystems

proc OpenAndResetStartPerspektive {
	try {
		if [ get-button [ t btn_start_perspective ] | get-property enablement -raw | equals true ] -then
		{
			get-button [ t btn_start_perspective ] | click  -metaKeys ""
			concat "OpenAndResetStartPerspektive called: " [t btn_start_perspective ] | log
		} -else {
			concat "OpenAndResetStartPerspektive button disabled: " [t btn_start_perspective ] | log
		}
		resetPerspective
	}-error [val errorObj] -catch {
		concat "ErrorObj: " $errorObj " for OpenAndResetStartPerspektive" | log
	}
	 // cleanup possible leftover of a last error
	close-window-if-open [ t show_view ]
	close-window-if-open [ t window_warning ]
	// we need reproducable conditions else labels etc suddenly vanish
	get-eclipse-window | get-object | invoke setSize 1400 1024
	// concat "OpenAndResetStartPerspektive: Size is " [ get-eclipse-window | get-object | invoke getSize ] | log
}

proc "create-entire-screenshot" [ val pathName [ cleanFileName [concat $imagesDir "screen.png"]]] {
	if [ get-by-os  -win true -macosx true -linux false ] {
		// We create normal screenshot on windows and macOSX as we do not run under openbox
		// and we get the windows titles anyway
		get-eclipse-window | get-object | save-screenshot $pathName // creates directory if necessary
	} -else {
		get-eclipse-window | get-object | save-screenshot [ concat $pathName ] // creates directory if necessary
	}
	concat "create-entire-screenshot pathName " $pathName | log
}

proc "GetActPatPersonalia" {
   try {
	invoke-static -pluginId ch.elexis.core.data -className ch.elexis.core.data.events.ElexisEventDispatcher -methodName getSelectedPatient |
		invoke getPersonalia
	} -catch {
		log "GetActPatPersonalia: no Patient selected"
	}
}

/**
 * Return the windows title, eg.
 *    Elexis 3.8.0.20190529-1746 -  Mustermann Max / Mustermann Max  / Armes-de Wesen (w), 15.02.1990 (29) - [6]
 */
proc "GetWindowTitle" {
	get-button[t zur_startperspektive] | get-object  | invoke getParent  | invoke getParent | invoke getParent | invoke getParent | invoke getText
}

proc "GetMainToolbar" {
	get-button[t zur_startperspektive] | get-object  | invoke getParent  | invoke getParent | invoke getParent
}

proc "GetBottomToolbar" {
	get-button Restore | get-object | invoke getParent | invoke getParent | invoke getParent
}

proc "SelectArtikelitemInTab"  [ val shortName "Losartan" ]  [ val longName "Losartan.*Stk.*" ] {
	with [get-view [t leistungen ] ] {
		get-tab-folder | get-tab-item Artikelstamm | click -metaKeys ""
		get-button [ t btn_automatic_search ] | uncheck
		get-group  [ t alle_leistungen ] | get-editbox -after [get-label [ t artikelstamm_label ] ] | set-text $shortName
		get-button [ t btn_execute_search ] | click -metaKeys ""
		wait 1000 // Time taken to execute the search
		get-group [ t alle_leistungen ] | get-table | get-property itemCount -raw | log
		if [ get-group [ t alle_leistungen ] | get-table | get-property itemCount -raw | eq 0 ] {
			get-eclipse-window | gen-screenshot [ concat $imagesDir "SelectArtikelitemInTab_" $shortName "_Workaround.png"]
			get-group  [ t alle_leistungen ] | get-editbox -after [get-label [ t artikelstamm_label ] ] | set-text ""
			get-button [ t btn_execute_search ] | click -metaKeys ""
			wait 1000 // Time taken to execute the search
			log -message "SelectArtikelitemInTab WorkAround was needed" -severity error
		}
		get-group [ t alle_leistungen ] | get-table | select $longName
		get-eclipse-window | gen-screenshot [concat $imagesDir "SelectArtikelitemInTab_" $shortName ".png"]
		concat "SelectArtikelitemInTab " $shortName " found " [
			get-group  [ t alle_leistungen ] | get-table | get-item -path $longName | get-property caption -raw ] | log
			get-group  [ t alle_leistungen ] | get-table | get-item -path $longName
			| get-property selected | equals true | verify-true
		concat "SelectArtikelitemInTab " $shortName " found " [get-group  [ t alle_leistungen ]  | get-table | get-property itemCount -raw ] " items found" | log
		get-group  [ t alle_leistungen ]  | get-table | get-property itemCount -raw | gt 0 | verify-true
	}
}

get-eclipse-window | gen-screenshot [ concat $imagesDir "window/ecl_helper_screenshot.png"]
create-entire-screenshot [ concat $imagesDir "window/entire_helper_screenshot.png"]
trace [ concat "create-entire-screenshot " $imagesDir "ecl_helper_screenshot.png"]

proc "open-window-by-name" [ val windowName ] {
	try {
		get-view $windowName
	} -catch {
		set-dialog-result File [ concat "/dummy_" $windowName ]
		get-menu -path [ t menu_select_view ]| click
		with [get-window [ t show_view ]] {
                   get-editbox | set-text ""
                       if [ matches $windowName ".*/.*" ] {
                               get-tree | expand-all | select [ replaceAll $windowName  " / " ".*" ] // needed for CST Minima / Maxima
                       } -else {
                               get-tree | expand-all | select [ concat ".*/" $windowName ]
                       }
                   get-editbox | set-text ""
                       // concat "open-window-by-name: " [ t menu_select_view ]" for " [ t windowName ]| log
                       get-button [t open ] | get-property enablement -raw | log
//			 get-editbox | set-text  [ replaceAll $windowName  "/" "" ]
			 get-button [t open ] | click
			// concat "open-window-by-name: lang " $defaultLanguage  ": "[ t menu_select_view ] " for " [ t windowName ]| log
		}
		// Seen when running ImportSwissbase with french Elexis
//			concat "open-window-by-name: " [$errorObj | get message] " for " $windowName | log
	}
}
proc "close-window-if-open" [val windowName] {
	log [concat "close-window-if-open: Must close Window " $windowName]

	try {
		get-window $windowName | close
	}  -error [val errorObj] -catch {
		concat "close-window-if-open: Window " $windowName " not open: "  [$errorObj | get message] | log
	}
}

global [val flightRecorderId 0 ] -override

find-all [GetWindowTitle] "(\\d+)\.(\\d+)\.(\\d+)\\." | to-list | each [val groups] {
	global [val elexisVersion [ concat [$groups | get 1 -default "unknown" ] "." [$groups | get 2 -default "unknown" ] ] ] -override
	concat "Saved elexisVersion is " $elexisVersion " from window title " [GetWindowTitle] | log
}

proc EnableFlightRecorder {
	if [ $elexisVersion | equals "3.9" ] {
		log "skip  EnableFlightRecorder as elexisVersion is 3.9"
	} -else {
		if [ get-menu -path [ t activate_flight_recorder ] | get-property selection -raw ] {
			log "elexisVersion " $elexisVersion " Flight Recorder is already enabled"
		} -else {
			log "elexisVersion " $elexisVersion " Flight Recorder disabled"
			get-menu -path [ t activate_flight_recorder ]| click -metaKeys ""
		}
	}
}

proc SaveFlightRecording [ val filePrefix "flighrecorder" ] {
	if [ $elexisVersion | equals "3.9" ] {
		log "skip SaveFlightRecording as elexisVersion is 3.9"
	} -else {
		global [val flightRecorderId [ $flightRecorderId | plus 1 ] ] -override
		let [ val fullName [ concat $resultsDir "jfr_" $filePrefix "_" $flightRecorderId ".jfr" ] ] {
			concat "elexisVersion " $elexisVersion " SaveFlightRecording to " $fullName | log
			set-dialog-result File $fullName
			get-menu -path [ t dump_flight_recording ] | click -metaKeys ""
			get-window Success | get-button OK | click -metaKeys ""
		}
	}
}

EnableFlightRecorder

OpenAndResetStartPerspektive


//
// Ende

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
